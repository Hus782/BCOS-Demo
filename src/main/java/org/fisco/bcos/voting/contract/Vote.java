package org.fisco.bcos.voting.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Vote extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b5060016060604051908101604052806040805190810160405280600c81526020017f46697273742043686f69636500000000000000000000000000000000000000008152508152602001600180549050815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000190805190602001906100b192919061023e565b50602082015181600101556040820151816002015550505060016060604051908101604052806040805190810160405280600d81526020017f5365636f6e642043686f6963650000000000000000000000000000000000000081525081526020016001805490508152602001600781525090806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001908051906020019061016992919061023e565b50602082015181600101556040820151816002015550505060016060604051908101604052806040805190810160405280600c81526020017f54686972642043686f696365000000000000000000000000000000000000000081525081526020016001805490508152602001600c81525090806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001908051906020019061022192919061023e565b5060208201518160010155604082015181600201555050506102e3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061027f57805160ff19168380011785556102ad565b828001600101855582156102ad579182015b828111156102ac578251825591602001919060010190610291565b5b5090506102ba91906102be565b5090565b6102e091905b808211156102dc5760008160009055506001016102c4565b5090565b90565b610913806102f26000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630121b93f1461007d5780633129e77314610123578063512dd020146101d75780636d4ce63c14610202578063a3ec138d14610292578063bfb231d2146102f4575b600080fd5b34801561008957600080fd5b506100a8600480360381019080803590602001909291905050506103a8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100e85780820151818401526020810190506100cd565b50505050905090810190601f1680156101155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561012f57600080fd5b5061014e60048036038101908080359060200190929190505050610602565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561019a57808201518184015260208101905061017f565b50505050905090810190601f1680156101c75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156101e357600080fd5b506101ec61079b565b6040518082815260200191505060405180910390f35b34801561020e57600080fd5b506102176107a8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025757808201518184015260208101905061023c565b50505050905090810190601f1680156102845780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029e57600080fd5b506102d3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107e5565b60405180831515151581526020018281526020019250505060405180910390f35b34801561030057600080fd5b5061031f60048036038101908080359060200190929190505050610816565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561036b578082015181840152602081019050610350565b50505050905090810190601f1680156103985780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6060600082101580156103bf575060018054905082105b1515610433576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c6964206974656d204944210000000000000000000000000000000081525060200191505060405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515156104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f596f75206861766520766f74656420616c72656164792100000000000000000081525060200191505060405180910390fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600180838154811015156105a757fe5b9060005260206000209060030201600201600082825401925050819055506040805190810160405280601381526020017f566f7465642073756363657366756c6c792120000000000000000000000000008152509050919050565b60606000806000841015801561061c575060018054905084105b1515610690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c6964206974656d204944000000000000000000000000000000000081525060200191505060405180910390fd5b60018481548110151561069f57fe5b90600052602060002090600302016000016001858154811015156106bf57fe5b9060005260206000209060030201600101546001868154811015156106e057fe5b906000526020600020906003020160020154828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107875780601f1061075c57610100808354040283529160200191610787565b820191906000526020600020905b81548152906001019060200180831161076a57829003601f168201915b505050505092509250925092509193909250565b6000600180549050905090565b60606040805190810160405280600d81526020017f48656c6c6f2c20576f726c642100000000000000000000000000000000000000815250905090565b60006020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b60018181548110151561082557fe5b9060005260206000209060030201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108d15780601f106108a6576101008083540402835291602001916108d1565b820191906000526020600020905b8154815290600101906020018083116108b457829003601f168201915b50505050509080600101549080600201549050835600a165627a7a72305820f67bf2436737af8e6c82e5af11fb447652ec14e9cd749c91f2ed43f589b4fa630029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b5060016060604051908101604052806040805190810160405280600c81526020017f46697273742043686f69636500000000000000000000000000000000000000008152508152602001600180549050815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000190805190602001906100b192919061023e565b50602082015181600101556040820151816002015550505060016060604051908101604052806040805190810160405280600d81526020017f5365636f6e642043686f6963650000000000000000000000000000000000000081525081526020016001805490508152602001600781525090806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001908051906020019061016992919061023e565b50602082015181600101556040820151816002015550505060016060604051908101604052806040805190810160405280600c81526020017f54686972642043686f696365000000000000000000000000000000000000000081525081526020016001805490508152602001600c81525090806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001908051906020019061022192919061023e565b5060208201518160010155604082015181600201555050506102e3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061027f57805160ff19168380011785556102ad565b828001600101855582156102ad579182015b828111156102ac578251825591602001919060010190610291565b5b5090506102ba91906102be565b5090565b6102e091905b808211156102dc5760008160009055506001016102c4565b5090565b90565b610913806102f26000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063299f7f9d1461007d57806339da890d1461010d5780638626f0c2146101385780638b9a727f146101ec578063c4eb2ab7146102a0578063f0b3ad8714610302575b600080fd5b34801561008957600080fd5b506100926103a8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100d25780820151818401526020810190506100b7565b50505050905090810190601f1680156100ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011957600080fd5b506101226103e5565b6040518082815260200191505060405180910390f35b34801561014457600080fd5b50610163600480360381019080803590602001909291905050506103f2565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156101af578082015181840152602081019050610194565b50505050905090810190601f1680156101dc5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156101f857600080fd5b50610217600480360381019080803590602001909291905050506104c3565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610263578082015181840152602081019050610248565b50505050905090810190601f1680156102905780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156102ac57600080fd5b506102e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061065c565b60405180831515151581526020018281526020019250505060405180910390f35b34801561030e57600080fd5b5061032d6004803603810190808035906020019092919050505061068d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036d578082015181840152602081019050610352565b50505050905090810190601f16801561039a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606040805190810160405280600d81526020017f48656c6c6f2c20576f726c642100000000000000000000000000000000000000815250905090565b6000600180549050905090565b60018181548110151561040157fe5b9060005260206000209060030201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ad5780601f10610482576101008083540402835291602001916104ad565b820191906000526020600020905b81548152906001019060200180831161049057829003601f168201915b5050505050908060010154908060020154905083565b6060600080600084101580156104dd575060018054905084105b1515610551576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c6964206974656d204944000000000000000000000000000000000081525060200191505060405180910390fd5b60018481548110151561056057fe5b906000526020600020906003020160000160018581548110151561058057fe5b9060005260206000209060030201600101546001868154811015156105a157fe5b906000526020600020906003020160020154828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106485780601f1061061d57610100808354040283529160200191610648565b820191906000526020600020905b81548152906001019060200180831161062b57829003601f168201915b505050505092509250925092509193909250565b60006020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154905082565b6060600082101580156106a4575060018054905082105b1515610718576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f496e76616c6964206974656d204944210000000000000000000000000000000081525060200191505060405180910390fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515156107dc576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f596f75206861766520766f74656420616c72656164792100000000000000000081525060200191505060405180910390fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001808381548110151561088c57fe5b9060005260206000209060030201600201600082825401925050819055506040805190810160405280601381526020017f566f7465642073756363657366756c6c7921200000000000000000000000000081525090509190505600a165627a7a7230582054337b15f04a8336f6001d7deb1ceb85620dfa263b41eda821b6ae91a9baf47a0029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ID\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getItemsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"voted\",\"type\":\"bool\"},{\"name\":\"vote\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ID\",\"type\":\"uint256\"},{\"name\":\"votenum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_GETITEM = "getItem";

    public static final String FUNC_GETITEMSCOUNT = "getItemsCount";

    public static final String FUNC_GET = "get";

    public static final String FUNC_VOTERS = "voters";

    public static final String FUNC_ITEMS = "items";

    protected Vote(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt vote(BigInteger ID) {
        final Function function = new Function(
                FUNC_VOTE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ID)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void vote(BigInteger ID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VOTE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ID)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVote(BigInteger ID) {
        final Function function = new Function(
                FUNC_VOTE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(ID)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VOTE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple1<String> getVoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VOTE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public Tuple3<String, BigInteger, BigInteger> getItem(BigInteger _ID) throws ContractException {
        final Function function = new Function(FUNC_GETITEM,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_ID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, BigInteger, BigInteger>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public BigInteger getItemsCount() throws ContractException {
        final Function function = new Function(FUNC_GETITEMSCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String get() throws ContractException {
        final Function function = new Function(FUNC_GET,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple2<Boolean, BigInteger> voters(String param0) throws ContractException {
        final Function function = new Function(FUNC_VOTERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, BigInteger>(
                (Boolean) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue());
    }

    public Tuple3<String, BigInteger, BigInteger> items(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ITEMS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, BigInteger, BigInteger>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public static Vote load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Vote(contractAddress, client, credential);
    }

    public static Vote deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Vote.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
